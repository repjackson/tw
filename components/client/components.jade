template(name='resonate_button')
    .resonate_button.ui.circular.button(class=resonate_button_class) 
        i.heartbeat.icon
        | This Resonates with Me
        

template(name='resonates_list')
    if resonates_with_people.count
        .ui.segment
            .ui.dividing.header
                |This Resonates With... (#{resonates_with_people.count})
            .ui.divided.list
                each resonates_with_people
                    .item
                        img.ui.avatar.image(src="{{c.url profile.image_id width=100 height=100 gravity='face' crop='fill'}}")
                        .content
                            .header
                                |#{name}
                            .description
                                +tiny_color_dots
                                each five_tags
                                    .ui.basic.label #{this}


template(name='toggle_doc_read')
    if read
        .mark_unread.ui.basic.button 
            i.open.envelope.outline.icon
            |Mark Unread
    else
        .mark_read.ui.basic.button 
            i.mail.outline.icon
            |Mark Read

template(name='read_by')
    // if read_by.count
    .ui.segment
        .ui.dividing.header
            |Read by... (#{read_by.count})
        .ui.divided.list
            each read_by
                .item
                    img.ui.avatar.image(src="{{c.url profile.image_id width=100 height=100 gravity='face' crop='fill'}}")
                    .content
                        .header
                            |#{name}
                        .description
                            +tiny_color_dots
                            each five_tags
                                .ui.basic.label #{this}


template(name='doc_matches')
    .ui.fluid.styled.accordion
        .title 
            i.random.icon
            |Top Doc Matches (#{top_doc_matches.length})
            i.dropdown.icon
            if currentUser
                #compute_doc_matches.ui.icon.basic.button(data-content='Compute Matches')
                    i.refresh.icon
        .content.match_content
            if top_doc_matches
                .ui.relaxed.divided.items
                    each top_doc_matches
                        +doc_match
                        
                        
                                        
template(name='doc_match')                    
    .item 
        .content
            .description
                i.random.icon
                |Intersection Tags (#{intersection_tags_count})
                each intersection_tags
                    .ui.basic.label #{this}
            .description
                i.tags.icon
                | Document Tags
                each tags
                    .ui.small.basic.label #{this}
            .description
                |#{match_doc.type} entry by
                img.ui.avatar.image(src="{{c.url match_doc.author.profile.image_id width=100 height=100 gravity='face' crop='fill'}}")
                | #{match_doc.author.name}
            .title
                i.dropdown.icon
                |Content 
            .content
                |!{match_doc.content}
            .extra
                a.ui.basic.compact.teal.button(href="/view/#{doc_id}") 
                    |Full
                    i.right.arrow.icon
                                        
template(name='service_buttons')
    .ui.dividing.header Services
    +request_tori_feedback
    +call_watson
                        
                        
template(name='request_tori_feedback')
    // .ui.dividing.header 
    //     i.comments.outline.icon
    //     |Request Feedback
    if feedback_requested
        .ui.header
            i.comments.outline.icon
            | Feedback Requested 
            |Status: Pending
        #cancel_request.ui.fluid.basic.button
            i.cancel.icon
            | Cancel Request
    else
        #request_feedback.ui.fluid.basic.button
            i.comments.outline.icon
            | Request Tori's Feedback
            
                
template(name='parent_doc_segment')
    if parent_id
        .ui.styled.fluid.accordion
            .title
                i.vertically.flipped.share.icon
                |In response to...
                i.dropdown.icon
            .content
                with parent
                    |!{content}
                    .ui.divider
                    .ui.horizontal.divided.list
                        .item
                            img.ui.avatar.image(src="{{c.url author.profile.image_id width=100 height=100 gravity='face' crop='fill'}}")
                            |by #{author.name}
                        .item
                            |Type:
                            .ui.basic.label #{type}
                    .ui.divider
                    .ui.horizontal.divided.list
                        .item
                            |Tags:
                            each tags
                                .ui.basic.small.label #{this}
                    .ui.divider
                    .ui.horizontal.divided.list
                        .item
                            +voting
                        .item
                            a.ui.basic.button(href="/view/#{_id}" title='View Document')
                                i.link.external.icon
                                |View Entry


template(name='view_published_toggle')
    if viewing_mine
        #view_all_entries.ui.basic.fluid.button
            img.ui.avatar.image(src="{{c.url currentUser.profile.image_id width=50 height=50 gravity='face' crop='fill'}}")
            |Viewing Mine (Public and Private)
    if viewing_all
        #view_my_entries.ui.basic.fluid.button 
            i.large.icons
                i.users.icon
                i.pencil.corner.icon
            |Viewing All Public

template(name='view_read_toggle')
    if viewing_unread
        #view_all.ui.basic.fluid.button
            i.open.envelope.icon
            |Viewiing Unread
    if viewing_all
        #view_unread.ui.basic.fluid.button 
            i.mail.icon
            |Viewing Read and Unread

template(name='stripe_cc_form')
    #card_element